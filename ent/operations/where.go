// Code generated by ent, DO NOT EDIT.

package operations

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lemonnekogh/reminderbot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldType, v))
}

// Completed applies equality check predicate on the "completed" field. It's identical to CompletedEQ.
func Completed(v bool) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldCompleted, v))
}

// Success applies equality check predicate on the "success" field. It's identical to SuccessEQ.
func Success(v bool) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldSuccess, v))
}

// Operator applies equality check predicate on the "operator" field. It's identical to OperatorEQ.
func Operator(v int64) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldOperator, v))
}

// MessageID applies equality check predicate on the "message_id" field. It's identical to MessageIDEQ.
func MessageID(v int) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldMessageID, v))
}

// RemindID applies equality check predicate on the "remind_id" field. It's identical to RemindIDEQ.
func RemindID(v uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldRemindID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.Operations {
	return predicate.Operations(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.Operations {
	return predicate.Operations(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.Operations {
	return predicate.Operations(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.Operations {
	return predicate.Operations(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.Operations {
	return predicate.Operations(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.Operations {
	return predicate.Operations(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.Operations {
	return predicate.Operations(sql.FieldLTE(FieldType, v))
}

// CompletedEQ applies the EQ predicate on the "completed" field.
func CompletedEQ(v bool) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldCompleted, v))
}

// CompletedNEQ applies the NEQ predicate on the "completed" field.
func CompletedNEQ(v bool) predicate.Operations {
	return predicate.Operations(sql.FieldNEQ(FieldCompleted, v))
}

// SuccessEQ applies the EQ predicate on the "success" field.
func SuccessEQ(v bool) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldSuccess, v))
}

// SuccessNEQ applies the NEQ predicate on the "success" field.
func SuccessNEQ(v bool) predicate.Operations {
	return predicate.Operations(sql.FieldNEQ(FieldSuccess, v))
}

// OperatorEQ applies the EQ predicate on the "operator" field.
func OperatorEQ(v int64) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldOperator, v))
}

// OperatorNEQ applies the NEQ predicate on the "operator" field.
func OperatorNEQ(v int64) predicate.Operations {
	return predicate.Operations(sql.FieldNEQ(FieldOperator, v))
}

// OperatorIn applies the In predicate on the "operator" field.
func OperatorIn(vs ...int64) predicate.Operations {
	return predicate.Operations(sql.FieldIn(FieldOperator, vs...))
}

// OperatorNotIn applies the NotIn predicate on the "operator" field.
func OperatorNotIn(vs ...int64) predicate.Operations {
	return predicate.Operations(sql.FieldNotIn(FieldOperator, vs...))
}

// OperatorGT applies the GT predicate on the "operator" field.
func OperatorGT(v int64) predicate.Operations {
	return predicate.Operations(sql.FieldGT(FieldOperator, v))
}

// OperatorGTE applies the GTE predicate on the "operator" field.
func OperatorGTE(v int64) predicate.Operations {
	return predicate.Operations(sql.FieldGTE(FieldOperator, v))
}

// OperatorLT applies the LT predicate on the "operator" field.
func OperatorLT(v int64) predicate.Operations {
	return predicate.Operations(sql.FieldLT(FieldOperator, v))
}

// OperatorLTE applies the LTE predicate on the "operator" field.
func OperatorLTE(v int64) predicate.Operations {
	return predicate.Operations(sql.FieldLTE(FieldOperator, v))
}

// MessageIDEQ applies the EQ predicate on the "message_id" field.
func MessageIDEQ(v int) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldMessageID, v))
}

// MessageIDNEQ applies the NEQ predicate on the "message_id" field.
func MessageIDNEQ(v int) predicate.Operations {
	return predicate.Operations(sql.FieldNEQ(FieldMessageID, v))
}

// MessageIDIn applies the In predicate on the "message_id" field.
func MessageIDIn(vs ...int) predicate.Operations {
	return predicate.Operations(sql.FieldIn(FieldMessageID, vs...))
}

// MessageIDNotIn applies the NotIn predicate on the "message_id" field.
func MessageIDNotIn(vs ...int) predicate.Operations {
	return predicate.Operations(sql.FieldNotIn(FieldMessageID, vs...))
}

// MessageIDGT applies the GT predicate on the "message_id" field.
func MessageIDGT(v int) predicate.Operations {
	return predicate.Operations(sql.FieldGT(FieldMessageID, v))
}

// MessageIDGTE applies the GTE predicate on the "message_id" field.
func MessageIDGTE(v int) predicate.Operations {
	return predicate.Operations(sql.FieldGTE(FieldMessageID, v))
}

// MessageIDLT applies the LT predicate on the "message_id" field.
func MessageIDLT(v int) predicate.Operations {
	return predicate.Operations(sql.FieldLT(FieldMessageID, v))
}

// MessageIDLTE applies the LTE predicate on the "message_id" field.
func MessageIDLTE(v int) predicate.Operations {
	return predicate.Operations(sql.FieldLTE(FieldMessageID, v))
}

// RemindIDEQ applies the EQ predicate on the "remind_id" field.
func RemindIDEQ(v uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldEQ(FieldRemindID, v))
}

// RemindIDNEQ applies the NEQ predicate on the "remind_id" field.
func RemindIDNEQ(v uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldNEQ(FieldRemindID, v))
}

// RemindIDIn applies the In predicate on the "remind_id" field.
func RemindIDIn(vs ...uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldIn(FieldRemindID, vs...))
}

// RemindIDNotIn applies the NotIn predicate on the "remind_id" field.
func RemindIDNotIn(vs ...uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldNotIn(FieldRemindID, vs...))
}

// RemindIDGT applies the GT predicate on the "remind_id" field.
func RemindIDGT(v uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldGT(FieldRemindID, v))
}

// RemindIDGTE applies the GTE predicate on the "remind_id" field.
func RemindIDGTE(v uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldGTE(FieldRemindID, v))
}

// RemindIDLT applies the LT predicate on the "remind_id" field.
func RemindIDLT(v uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldLT(FieldRemindID, v))
}

// RemindIDLTE applies the LTE predicate on the "remind_id" field.
func RemindIDLTE(v uuid.UUID) predicate.Operations {
	return predicate.Operations(sql.FieldLTE(FieldRemindID, v))
}

// RemindIDIsNil applies the IsNil predicate on the "remind_id" field.
func RemindIDIsNil() predicate.Operations {
	return predicate.Operations(sql.FieldIsNull(FieldRemindID))
}

// RemindIDNotNil applies the NotNil predicate on the "remind_id" field.
func RemindIDNotNil() predicate.Operations {
	return predicate.Operations(sql.FieldNotNull(FieldRemindID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Operations) predicate.Operations {
	return predicate.Operations(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Operations) predicate.Operations {
	return predicate.Operations(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Operations) predicate.Operations {
	return predicate.Operations(func(s *sql.Selector) {
		p(s.Not())
	})
}
