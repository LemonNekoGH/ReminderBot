// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lemonnekogh/reminderbot/ent/operations"
	"github.com/lemonnekogh/reminderbot/ent/predicate"
)

// OperationsUpdate is the builder for updating Operations entities.
type OperationsUpdate struct {
	config
	hooks    []Hook
	mutation *OperationsMutation
}

// Where appends a list predicates to the OperationsUpdate builder.
func (ou *OperationsUpdate) Where(ps ...predicate.Operations) *OperationsUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetType sets the "type" field.
func (ou *OperationsUpdate) SetType(i int) *OperationsUpdate {
	ou.mutation.ResetType()
	ou.mutation.SetType(i)
	return ou
}

// AddType adds i to the "type" field.
func (ou *OperationsUpdate) AddType(i int) *OperationsUpdate {
	ou.mutation.AddType(i)
	return ou
}

// SetCompleted sets the "completed" field.
func (ou *OperationsUpdate) SetCompleted(b bool) *OperationsUpdate {
	ou.mutation.SetCompleted(b)
	return ou
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (ou *OperationsUpdate) SetNillableCompleted(b *bool) *OperationsUpdate {
	if b != nil {
		ou.SetCompleted(*b)
	}
	return ou
}

// SetSuccess sets the "success" field.
func (ou *OperationsUpdate) SetSuccess(b bool) *OperationsUpdate {
	ou.mutation.SetSuccess(b)
	return ou
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (ou *OperationsUpdate) SetNillableSuccess(b *bool) *OperationsUpdate {
	if b != nil {
		ou.SetSuccess(*b)
	}
	return ou
}

// SetOperator sets the "operator" field.
func (ou *OperationsUpdate) SetOperator(i int64) *OperationsUpdate {
	ou.mutation.ResetOperator()
	ou.mutation.SetOperator(i)
	return ou
}

// AddOperator adds i to the "operator" field.
func (ou *OperationsUpdate) AddOperator(i int64) *OperationsUpdate {
	ou.mutation.AddOperator(i)
	return ou
}

// SetMessageID sets the "message_id" field.
func (ou *OperationsUpdate) SetMessageID(i int) *OperationsUpdate {
	ou.mutation.ResetMessageID()
	ou.mutation.SetMessageID(i)
	return ou
}

// AddMessageID adds i to the "message_id" field.
func (ou *OperationsUpdate) AddMessageID(i int) *OperationsUpdate {
	ou.mutation.AddMessageID(i)
	return ou
}

// SetRemindID sets the "remind_id" field.
func (ou *OperationsUpdate) SetRemindID(u uuid.UUID) *OperationsUpdate {
	ou.mutation.SetRemindID(u)
	return ou
}

// SetNillableRemindID sets the "remind_id" field if the given value is not nil.
func (ou *OperationsUpdate) SetNillableRemindID(u *uuid.UUID) *OperationsUpdate {
	if u != nil {
		ou.SetRemindID(*u)
	}
	return ou
}

// ClearRemindID clears the value of the "remind_id" field.
func (ou *OperationsUpdate) ClearRemindID() *OperationsUpdate {
	ou.mutation.ClearRemindID()
	return ou
}

// Mutation returns the OperationsMutation object of the builder.
func (ou *OperationsUpdate) Mutation() *OperationsMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperationsUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperationsUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperationsUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OperationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operations.Table, operations.Columns, sqlgraph.NewFieldSpec(operations.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(operations.FieldType, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedType(); ok {
		_spec.AddField(operations.FieldType, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Completed(); ok {
		_spec.SetField(operations.FieldCompleted, field.TypeBool, value)
	}
	if value, ok := ou.mutation.Success(); ok {
		_spec.SetField(operations.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := ou.mutation.Operator(); ok {
		_spec.SetField(operations.FieldOperator, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedOperator(); ok {
		_spec.AddField(operations.FieldOperator, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.MessageID(); ok {
		_spec.SetField(operations.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedMessageID(); ok {
		_spec.AddField(operations.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.RemindID(); ok {
		_spec.SetField(operations.FieldRemindID, field.TypeUUID, value)
	}
	if ou.mutation.RemindIDCleared() {
		_spec.ClearField(operations.FieldRemindID, field.TypeUUID)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperationsUpdateOne is the builder for updating a single Operations entity.
type OperationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperationsMutation
}

// SetType sets the "type" field.
func (ouo *OperationsUpdateOne) SetType(i int) *OperationsUpdateOne {
	ouo.mutation.ResetType()
	ouo.mutation.SetType(i)
	return ouo
}

// AddType adds i to the "type" field.
func (ouo *OperationsUpdateOne) AddType(i int) *OperationsUpdateOne {
	ouo.mutation.AddType(i)
	return ouo
}

// SetCompleted sets the "completed" field.
func (ouo *OperationsUpdateOne) SetCompleted(b bool) *OperationsUpdateOne {
	ouo.mutation.SetCompleted(b)
	return ouo
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (ouo *OperationsUpdateOne) SetNillableCompleted(b *bool) *OperationsUpdateOne {
	if b != nil {
		ouo.SetCompleted(*b)
	}
	return ouo
}

// SetSuccess sets the "success" field.
func (ouo *OperationsUpdateOne) SetSuccess(b bool) *OperationsUpdateOne {
	ouo.mutation.SetSuccess(b)
	return ouo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (ouo *OperationsUpdateOne) SetNillableSuccess(b *bool) *OperationsUpdateOne {
	if b != nil {
		ouo.SetSuccess(*b)
	}
	return ouo
}

// SetOperator sets the "operator" field.
func (ouo *OperationsUpdateOne) SetOperator(i int64) *OperationsUpdateOne {
	ouo.mutation.ResetOperator()
	ouo.mutation.SetOperator(i)
	return ouo
}

// AddOperator adds i to the "operator" field.
func (ouo *OperationsUpdateOne) AddOperator(i int64) *OperationsUpdateOne {
	ouo.mutation.AddOperator(i)
	return ouo
}

// SetMessageID sets the "message_id" field.
func (ouo *OperationsUpdateOne) SetMessageID(i int) *OperationsUpdateOne {
	ouo.mutation.ResetMessageID()
	ouo.mutation.SetMessageID(i)
	return ouo
}

// AddMessageID adds i to the "message_id" field.
func (ouo *OperationsUpdateOne) AddMessageID(i int) *OperationsUpdateOne {
	ouo.mutation.AddMessageID(i)
	return ouo
}

// SetRemindID sets the "remind_id" field.
func (ouo *OperationsUpdateOne) SetRemindID(u uuid.UUID) *OperationsUpdateOne {
	ouo.mutation.SetRemindID(u)
	return ouo
}

// SetNillableRemindID sets the "remind_id" field if the given value is not nil.
func (ouo *OperationsUpdateOne) SetNillableRemindID(u *uuid.UUID) *OperationsUpdateOne {
	if u != nil {
		ouo.SetRemindID(*u)
	}
	return ouo
}

// ClearRemindID clears the value of the "remind_id" field.
func (ouo *OperationsUpdateOne) ClearRemindID() *OperationsUpdateOne {
	ouo.mutation.ClearRemindID()
	return ouo
}

// Mutation returns the OperationsMutation object of the builder.
func (ouo *OperationsUpdateOne) Mutation() *OperationsMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OperationsUpdate builder.
func (ouo *OperationsUpdateOne) Where(ps ...predicate.Operations) *OperationsUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperationsUpdateOne) Select(field string, fields ...string) *OperationsUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operations entity.
func (ouo *OperationsUpdateOne) Save(ctx context.Context) (*Operations, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperationsUpdateOne) SaveX(ctx context.Context) *Operations {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperationsUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperationsUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OperationsUpdateOne) sqlSave(ctx context.Context) (_node *Operations, err error) {
	_spec := sqlgraph.NewUpdateSpec(operations.Table, operations.Columns, sqlgraph.NewFieldSpec(operations.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operations.FieldID)
		for _, f := range fields {
			if !operations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(operations.FieldType, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedType(); ok {
		_spec.AddField(operations.FieldType, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Completed(); ok {
		_spec.SetField(operations.FieldCompleted, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.Success(); ok {
		_spec.SetField(operations.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.Operator(); ok {
		_spec.SetField(operations.FieldOperator, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedOperator(); ok {
		_spec.AddField(operations.FieldOperator, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.MessageID(); ok {
		_spec.SetField(operations.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedMessageID(); ok {
		_spec.AddField(operations.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.RemindID(); ok {
		_spec.SetField(operations.FieldRemindID, field.TypeUUID, value)
	}
	if ouo.mutation.RemindIDCleared() {
		_spec.ClearField(operations.FieldRemindID, field.TypeUUID)
	}
	_node = &Operations{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
