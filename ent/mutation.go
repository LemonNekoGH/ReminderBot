// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lemonnekogh/reminderbot/ent/operations"
	"github.com/lemonnekogh/reminderbot/ent/predicate"
	"github.com/lemonnekogh/reminderbot/ent/reminds"
	"github.com/lemonnekogh/reminderbot/ent/settings"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOperations = "Operations"
	TypeReminds    = "Reminds"
	TypeSettings   = "Settings"
)

// OperationsMutation represents an operation that mutates the Operations nodes in the graph.
type OperationsMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	_type         *int
	add_type      *int
	completed     *bool
	success       *bool
	operator      *int64
	addoperator   *int64
	message_id    *int
	addmessage_id *int
	remind_id     *uuid.UUID
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Operations, error)
	predicates    []predicate.Operations
}

var _ ent.Mutation = (*OperationsMutation)(nil)

// operationsOption allows management of the mutation configuration using functional options.
type operationsOption func(*OperationsMutation)

// newOperationsMutation creates new mutation for the Operations entity.
func newOperationsMutation(c config, op Op, opts ...operationsOption) *OperationsMutation {
	m := &OperationsMutation{
		config:        c,
		op:            op,
		typ:           TypeOperations,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOperationsID sets the ID field of the mutation.
func withOperationsID(id uuid.UUID) operationsOption {
	return func(m *OperationsMutation) {
		var (
			err   error
			once  sync.Once
			value *Operations
		)
		m.oldValue = func(ctx context.Context) (*Operations, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Operations.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOperations sets the old Operations of the mutation.
func withOperations(node *Operations) operationsOption {
	return func(m *OperationsMutation) {
		m.oldValue = func(context.Context) (*Operations, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OperationsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OperationsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Operations entities.
func (m *OperationsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OperationsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OperationsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Operations.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *OperationsMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *OperationsMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Operations entity.
// If the Operations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperationsMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *OperationsMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *OperationsMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *OperationsMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetCompleted sets the "completed" field.
func (m *OperationsMutation) SetCompleted(b bool) {
	m.completed = &b
}

// Completed returns the value of the "completed" field in the mutation.
func (m *OperationsMutation) Completed() (r bool, exists bool) {
	v := m.completed
	if v == nil {
		return
	}
	return *v, true
}

// OldCompleted returns the old "completed" field's value of the Operations entity.
// If the Operations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperationsMutation) OldCompleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompleted: %w", err)
	}
	return oldValue.Completed, nil
}

// ResetCompleted resets all changes to the "completed" field.
func (m *OperationsMutation) ResetCompleted() {
	m.completed = nil
}

// SetSuccess sets the "success" field.
func (m *OperationsMutation) SetSuccess(b bool) {
	m.success = &b
}

// Success returns the value of the "success" field in the mutation.
func (m *OperationsMutation) Success() (r bool, exists bool) {
	v := m.success
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccess returns the old "success" field's value of the Operations entity.
// If the Operations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperationsMutation) OldSuccess(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccess: %w", err)
	}
	return oldValue.Success, nil
}

// ResetSuccess resets all changes to the "success" field.
func (m *OperationsMutation) ResetSuccess() {
	m.success = nil
}

// SetOperator sets the "operator" field.
func (m *OperationsMutation) SetOperator(i int64) {
	m.operator = &i
	m.addoperator = nil
}

// Operator returns the value of the "operator" field in the mutation.
func (m *OperationsMutation) Operator() (r int64, exists bool) {
	v := m.operator
	if v == nil {
		return
	}
	return *v, true
}

// OldOperator returns the old "operator" field's value of the Operations entity.
// If the Operations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperationsMutation) OldOperator(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperator: %w", err)
	}
	return oldValue.Operator, nil
}

// AddOperator adds i to the "operator" field.
func (m *OperationsMutation) AddOperator(i int64) {
	if m.addoperator != nil {
		*m.addoperator += i
	} else {
		m.addoperator = &i
	}
}

// AddedOperator returns the value that was added to the "operator" field in this mutation.
func (m *OperationsMutation) AddedOperator() (r int64, exists bool) {
	v := m.addoperator
	if v == nil {
		return
	}
	return *v, true
}

// ResetOperator resets all changes to the "operator" field.
func (m *OperationsMutation) ResetOperator() {
	m.operator = nil
	m.addoperator = nil
}

// SetMessageID sets the "message_id" field.
func (m *OperationsMutation) SetMessageID(i int) {
	m.message_id = &i
	m.addmessage_id = nil
}

// MessageID returns the value of the "message_id" field in the mutation.
func (m *OperationsMutation) MessageID() (r int, exists bool) {
	v := m.message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageID returns the old "message_id" field's value of the Operations entity.
// If the Operations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperationsMutation) OldMessageID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageID: %w", err)
	}
	return oldValue.MessageID, nil
}

// AddMessageID adds i to the "message_id" field.
func (m *OperationsMutation) AddMessageID(i int) {
	if m.addmessage_id != nil {
		*m.addmessage_id += i
	} else {
		m.addmessage_id = &i
	}
}

// AddedMessageID returns the value that was added to the "message_id" field in this mutation.
func (m *OperationsMutation) AddedMessageID() (r int, exists bool) {
	v := m.addmessage_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMessageID resets all changes to the "message_id" field.
func (m *OperationsMutation) ResetMessageID() {
	m.message_id = nil
	m.addmessage_id = nil
}

// SetRemindID sets the "remind_id" field.
func (m *OperationsMutation) SetRemindID(u uuid.UUID) {
	m.remind_id = &u
}

// RemindID returns the value of the "remind_id" field in the mutation.
func (m *OperationsMutation) RemindID() (r uuid.UUID, exists bool) {
	v := m.remind_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRemindID returns the old "remind_id" field's value of the Operations entity.
// If the Operations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperationsMutation) OldRemindID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemindID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemindID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemindID: %w", err)
	}
	return oldValue.RemindID, nil
}

// ClearRemindID clears the value of the "remind_id" field.
func (m *OperationsMutation) ClearRemindID() {
	m.remind_id = nil
	m.clearedFields[operations.FieldRemindID] = struct{}{}
}

// RemindIDCleared returns if the "remind_id" field was cleared in this mutation.
func (m *OperationsMutation) RemindIDCleared() bool {
	_, ok := m.clearedFields[operations.FieldRemindID]
	return ok
}

// ResetRemindID resets all changes to the "remind_id" field.
func (m *OperationsMutation) ResetRemindID() {
	m.remind_id = nil
	delete(m.clearedFields, operations.FieldRemindID)
}

// Where appends a list predicates to the OperationsMutation builder.
func (m *OperationsMutation) Where(ps ...predicate.Operations) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OperationsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OperationsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Operations, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OperationsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OperationsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Operations).
func (m *OperationsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OperationsMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._type != nil {
		fields = append(fields, operations.FieldType)
	}
	if m.completed != nil {
		fields = append(fields, operations.FieldCompleted)
	}
	if m.success != nil {
		fields = append(fields, operations.FieldSuccess)
	}
	if m.operator != nil {
		fields = append(fields, operations.FieldOperator)
	}
	if m.message_id != nil {
		fields = append(fields, operations.FieldMessageID)
	}
	if m.remind_id != nil {
		fields = append(fields, operations.FieldRemindID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OperationsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case operations.FieldType:
		return m.GetType()
	case operations.FieldCompleted:
		return m.Completed()
	case operations.FieldSuccess:
		return m.Success()
	case operations.FieldOperator:
		return m.Operator()
	case operations.FieldMessageID:
		return m.MessageID()
	case operations.FieldRemindID:
		return m.RemindID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OperationsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case operations.FieldType:
		return m.OldType(ctx)
	case operations.FieldCompleted:
		return m.OldCompleted(ctx)
	case operations.FieldSuccess:
		return m.OldSuccess(ctx)
	case operations.FieldOperator:
		return m.OldOperator(ctx)
	case operations.FieldMessageID:
		return m.OldMessageID(ctx)
	case operations.FieldRemindID:
		return m.OldRemindID(ctx)
	}
	return nil, fmt.Errorf("unknown Operations field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperationsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case operations.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case operations.FieldCompleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompleted(v)
		return nil
	case operations.FieldSuccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccess(v)
		return nil
	case operations.FieldOperator:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperator(v)
		return nil
	case operations.FieldMessageID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageID(v)
		return nil
	case operations.FieldRemindID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemindID(v)
		return nil
	}
	return fmt.Errorf("unknown Operations field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OperationsMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, operations.FieldType)
	}
	if m.addoperator != nil {
		fields = append(fields, operations.FieldOperator)
	}
	if m.addmessage_id != nil {
		fields = append(fields, operations.FieldMessageID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OperationsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case operations.FieldType:
		return m.AddedType()
	case operations.FieldOperator:
		return m.AddedOperator()
	case operations.FieldMessageID:
		return m.AddedMessageID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperationsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case operations.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case operations.FieldOperator:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOperator(v)
		return nil
	case operations.FieldMessageID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMessageID(v)
		return nil
	}
	return fmt.Errorf("unknown Operations numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OperationsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(operations.FieldRemindID) {
		fields = append(fields, operations.FieldRemindID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OperationsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OperationsMutation) ClearField(name string) error {
	switch name {
	case operations.FieldRemindID:
		m.ClearRemindID()
		return nil
	}
	return fmt.Errorf("unknown Operations nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OperationsMutation) ResetField(name string) error {
	switch name {
	case operations.FieldType:
		m.ResetType()
		return nil
	case operations.FieldCompleted:
		m.ResetCompleted()
		return nil
	case operations.FieldSuccess:
		m.ResetSuccess()
		return nil
	case operations.FieldOperator:
		m.ResetOperator()
		return nil
	case operations.FieldMessageID:
		m.ResetMessageID()
		return nil
	case operations.FieldRemindID:
		m.ResetRemindID()
		return nil
	}
	return fmt.Errorf("unknown Operations field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OperationsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OperationsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OperationsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OperationsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OperationsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OperationsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OperationsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Operations unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OperationsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Operations edge %s", name)
}

// RemindsMutation represents an operation that mutates the Reminds nodes in the graph.
type RemindsMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	chat_id       *int64
	addchat_id    *int64
	owner         *int64
	addowner      *int64
	period        *string
	content       *string
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Reminds, error)
	predicates    []predicate.Reminds
}

var _ ent.Mutation = (*RemindsMutation)(nil)

// remindsOption allows management of the mutation configuration using functional options.
type remindsOption func(*RemindsMutation)

// newRemindsMutation creates new mutation for the Reminds entity.
func newRemindsMutation(c config, op Op, opts ...remindsOption) *RemindsMutation {
	m := &RemindsMutation{
		config:        c,
		op:            op,
		typ:           TypeReminds,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRemindsID sets the ID field of the mutation.
func withRemindsID(id uuid.UUID) remindsOption {
	return func(m *RemindsMutation) {
		var (
			err   error
			once  sync.Once
			value *Reminds
		)
		m.oldValue = func(ctx context.Context) (*Reminds, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reminds.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReminds sets the old Reminds of the mutation.
func withReminds(node *Reminds) remindsOption {
	return func(m *RemindsMutation) {
		m.oldValue = func(context.Context) (*Reminds, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RemindsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RemindsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Reminds entities.
func (m *RemindsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RemindsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RemindsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reminds.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *RemindsMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *RemindsMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the Reminds entity.
// If the Reminds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RemindsMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *RemindsMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *RemindsMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *RemindsMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetOwner sets the "owner" field.
func (m *RemindsMutation) SetOwner(i int64) {
	m.owner = &i
	m.addowner = nil
}

// Owner returns the value of the "owner" field in the mutation.
func (m *RemindsMutation) Owner() (r int64, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Reminds entity.
// If the Reminds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RemindsMutation) OldOwner(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// AddOwner adds i to the "owner" field.
func (m *RemindsMutation) AddOwner(i int64) {
	if m.addowner != nil {
		*m.addowner += i
	} else {
		m.addowner = &i
	}
}

// AddedOwner returns the value that was added to the "owner" field in this mutation.
func (m *RemindsMutation) AddedOwner() (r int64, exists bool) {
	v := m.addowner
	if v == nil {
		return
	}
	return *v, true
}

// ResetOwner resets all changes to the "owner" field.
func (m *RemindsMutation) ResetOwner() {
	m.owner = nil
	m.addowner = nil
}

// SetPeriod sets the "period" field.
func (m *RemindsMutation) SetPeriod(s string) {
	m.period = &s
}

// Period returns the value of the "period" field in the mutation.
func (m *RemindsMutation) Period() (r string, exists bool) {
	v := m.period
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriod returns the old "period" field's value of the Reminds entity.
// If the Reminds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RemindsMutation) OldPeriod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriod: %w", err)
	}
	return oldValue.Period, nil
}

// ClearPeriod clears the value of the "period" field.
func (m *RemindsMutation) ClearPeriod() {
	m.period = nil
	m.clearedFields[reminds.FieldPeriod] = struct{}{}
}

// PeriodCleared returns if the "period" field was cleared in this mutation.
func (m *RemindsMutation) PeriodCleared() bool {
	_, ok := m.clearedFields[reminds.FieldPeriod]
	return ok
}

// ResetPeriod resets all changes to the "period" field.
func (m *RemindsMutation) ResetPeriod() {
	m.period = nil
	delete(m.clearedFields, reminds.FieldPeriod)
}

// SetContent sets the "content" field.
func (m *RemindsMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *RemindsMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Reminds entity.
// If the Reminds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RemindsMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *RemindsMutation) ClearContent() {
	m.content = nil
	m.clearedFields[reminds.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *RemindsMutation) ContentCleared() bool {
	_, ok := m.clearedFields[reminds.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *RemindsMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, reminds.FieldContent)
}

// SetName sets the "name" field.
func (m *RemindsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RemindsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Reminds entity.
// If the Reminds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RemindsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RemindsMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the RemindsMutation builder.
func (m *RemindsMutation) Where(ps ...predicate.Reminds) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RemindsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RemindsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Reminds, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RemindsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RemindsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Reminds).
func (m *RemindsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RemindsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.chat_id != nil {
		fields = append(fields, reminds.FieldChatID)
	}
	if m.owner != nil {
		fields = append(fields, reminds.FieldOwner)
	}
	if m.period != nil {
		fields = append(fields, reminds.FieldPeriod)
	}
	if m.content != nil {
		fields = append(fields, reminds.FieldContent)
	}
	if m.name != nil {
		fields = append(fields, reminds.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RemindsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reminds.FieldChatID:
		return m.ChatID()
	case reminds.FieldOwner:
		return m.Owner()
	case reminds.FieldPeriod:
		return m.Period()
	case reminds.FieldContent:
		return m.Content()
	case reminds.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RemindsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reminds.FieldChatID:
		return m.OldChatID(ctx)
	case reminds.FieldOwner:
		return m.OldOwner(ctx)
	case reminds.FieldPeriod:
		return m.OldPeriod(ctx)
	case reminds.FieldContent:
		return m.OldContent(ctx)
	case reminds.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Reminds field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RemindsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reminds.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case reminds.FieldOwner:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case reminds.FieldPeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriod(v)
		return nil
	case reminds.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case reminds.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Reminds field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RemindsMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, reminds.FieldChatID)
	}
	if m.addowner != nil {
		fields = append(fields, reminds.FieldOwner)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RemindsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case reminds.FieldChatID:
		return m.AddedChatID()
	case reminds.FieldOwner:
		return m.AddedOwner()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RemindsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case reminds.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	case reminds.FieldOwner:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOwner(v)
		return nil
	}
	return fmt.Errorf("unknown Reminds numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RemindsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(reminds.FieldPeriod) {
		fields = append(fields, reminds.FieldPeriod)
	}
	if m.FieldCleared(reminds.FieldContent) {
		fields = append(fields, reminds.FieldContent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RemindsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RemindsMutation) ClearField(name string) error {
	switch name {
	case reminds.FieldPeriod:
		m.ClearPeriod()
		return nil
	case reminds.FieldContent:
		m.ClearContent()
		return nil
	}
	return fmt.Errorf("unknown Reminds nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RemindsMutation) ResetField(name string) error {
	switch name {
	case reminds.FieldChatID:
		m.ResetChatID()
		return nil
	case reminds.FieldOwner:
		m.ResetOwner()
		return nil
	case reminds.FieldPeriod:
		m.ResetPeriod()
		return nil
	case reminds.FieldContent:
		m.ResetContent()
		return nil
	case reminds.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Reminds field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RemindsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RemindsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RemindsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RemindsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RemindsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RemindsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RemindsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Reminds unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RemindsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Reminds edge %s", name)
}

// SettingsMutation represents an operation that mutates the Settings nodes in the graph.
type SettingsMutation struct {
	config
	op             Op
	typ            string
	id             *int
	chat_id        *int64
	addchat_id     *int64
	allow_all_user *bool
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Settings, error)
	predicates     []predicate.Settings
}

var _ ent.Mutation = (*SettingsMutation)(nil)

// settingsOption allows management of the mutation configuration using functional options.
type settingsOption func(*SettingsMutation)

// newSettingsMutation creates new mutation for the Settings entity.
func newSettingsMutation(c config, op Op, opts ...settingsOption) *SettingsMutation {
	m := &SettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingsID sets the ID field of the mutation.
func withSettingsID(id int) settingsOption {
	return func(m *SettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *Settings
		)
		m.oldValue = func(ctx context.Context) (*Settings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Settings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSettings sets the old Settings of the mutation.
func withSettings(node *Settings) settingsOption {
	return func(m *SettingsMutation) {
		m.oldValue = func(context.Context) (*Settings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Settings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *SettingsMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *SettingsMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *SettingsMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *SettingsMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *SettingsMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetAllowAllUser sets the "allow_all_user" field.
func (m *SettingsMutation) SetAllowAllUser(b bool) {
	m.allow_all_user = &b
}

// AllowAllUser returns the value of the "allow_all_user" field in the mutation.
func (m *SettingsMutation) AllowAllUser() (r bool, exists bool) {
	v := m.allow_all_user
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowAllUser returns the old "allow_all_user" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldAllowAllUser(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllowAllUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllowAllUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowAllUser: %w", err)
	}
	return oldValue.AllowAllUser, nil
}

// ResetAllowAllUser resets all changes to the "allow_all_user" field.
func (m *SettingsMutation) ResetAllowAllUser() {
	m.allow_all_user = nil
}

// Where appends a list predicates to the SettingsMutation builder.
func (m *SettingsMutation) Where(ps ...predicate.Settings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Settings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Settings).
func (m *SettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingsMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.chat_id != nil {
		fields = append(fields, settings.FieldChatID)
	}
	if m.allow_all_user != nil {
		fields = append(fields, settings.FieldAllowAllUser)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldChatID:
		return m.ChatID()
	case settings.FieldAllowAllUser:
		return m.AllowAllUser()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case settings.FieldChatID:
		return m.OldChatID(ctx)
	case settings.FieldAllowAllUser:
		return m.OldAllowAllUser(ctx)
	}
	return nil, fmt.Errorf("unknown Settings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case settings.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case settings.FieldAllowAllUser:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowAllUser(v)
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingsMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, settings.FieldChatID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldChatID:
		return m.AddedChatID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case settings.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	}
	return fmt.Errorf("unknown Settings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Settings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingsMutation) ResetField(name string) error {
	switch name {
	case settings.FieldChatID:
		m.ResetChatID()
		return nil
	case settings.FieldAllowAllUser:
		m.ResetAllowAllUser()
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Settings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Settings edge %s", name)
}
