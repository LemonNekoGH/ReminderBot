// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lemonnekogh/reminderbot/ent/predicate"
	"github.com/lemonnekogh/reminderbot/ent/reminds"
)

// RemindsUpdate is the builder for updating Reminds entities.
type RemindsUpdate struct {
	config
	hooks    []Hook
	mutation *RemindsMutation
}

// Where appends a list predicates to the RemindsUpdate builder.
func (ru *RemindsUpdate) Where(ps ...predicate.Reminds) *RemindsUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetChatID sets the "chat_id" field.
func (ru *RemindsUpdate) SetChatID(i int64) *RemindsUpdate {
	ru.mutation.ResetChatID()
	ru.mutation.SetChatID(i)
	return ru
}

// AddChatID adds i to the "chat_id" field.
func (ru *RemindsUpdate) AddChatID(i int64) *RemindsUpdate {
	ru.mutation.AddChatID(i)
	return ru
}

// SetOwner sets the "owner" field.
func (ru *RemindsUpdate) SetOwner(i int64) *RemindsUpdate {
	ru.mutation.ResetOwner()
	ru.mutation.SetOwner(i)
	return ru
}

// AddOwner adds i to the "owner" field.
func (ru *RemindsUpdate) AddOwner(i int64) *RemindsUpdate {
	ru.mutation.AddOwner(i)
	return ru
}

// SetPeriod sets the "period" field.
func (ru *RemindsUpdate) SetPeriod(s string) *RemindsUpdate {
	ru.mutation.SetPeriod(s)
	return ru
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (ru *RemindsUpdate) SetNillablePeriod(s *string) *RemindsUpdate {
	if s != nil {
		ru.SetPeriod(*s)
	}
	return ru
}

// ClearPeriod clears the value of the "period" field.
func (ru *RemindsUpdate) ClearPeriod() *RemindsUpdate {
	ru.mutation.ClearPeriod()
	return ru
}

// SetContent sets the "content" field.
func (ru *RemindsUpdate) SetContent(s string) *RemindsUpdate {
	ru.mutation.SetContent(s)
	return ru
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ru *RemindsUpdate) SetNillableContent(s *string) *RemindsUpdate {
	if s != nil {
		ru.SetContent(*s)
	}
	return ru
}

// ClearContent clears the value of the "content" field.
func (ru *RemindsUpdate) ClearContent() *RemindsUpdate {
	ru.mutation.ClearContent()
	return ru
}

// SetName sets the "name" field.
func (ru *RemindsUpdate) SetName(s string) *RemindsUpdate {
	ru.mutation.SetName(s)
	return ru
}

// Mutation returns the RemindsMutation object of the builder.
func (ru *RemindsUpdate) Mutation() *RemindsMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RemindsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RemindsUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RemindsUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RemindsUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RemindsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reminds.Table, reminds.Columns, sqlgraph.NewFieldSpec(reminds.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ChatID(); ok {
		_spec.SetField(reminds.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedChatID(); ok {
		_spec.AddField(reminds.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Owner(); ok {
		_spec.SetField(reminds.FieldOwner, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedOwner(); ok {
		_spec.AddField(reminds.FieldOwner, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Period(); ok {
		_spec.SetField(reminds.FieldPeriod, field.TypeString, value)
	}
	if ru.mutation.PeriodCleared() {
		_spec.ClearField(reminds.FieldPeriod, field.TypeString)
	}
	if value, ok := ru.mutation.Content(); ok {
		_spec.SetField(reminds.FieldContent, field.TypeString, value)
	}
	if ru.mutation.ContentCleared() {
		_spec.ClearField(reminds.FieldContent, field.TypeString)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(reminds.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reminds.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RemindsUpdateOne is the builder for updating a single Reminds entity.
type RemindsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RemindsMutation
}

// SetChatID sets the "chat_id" field.
func (ruo *RemindsUpdateOne) SetChatID(i int64) *RemindsUpdateOne {
	ruo.mutation.ResetChatID()
	ruo.mutation.SetChatID(i)
	return ruo
}

// AddChatID adds i to the "chat_id" field.
func (ruo *RemindsUpdateOne) AddChatID(i int64) *RemindsUpdateOne {
	ruo.mutation.AddChatID(i)
	return ruo
}

// SetOwner sets the "owner" field.
func (ruo *RemindsUpdateOne) SetOwner(i int64) *RemindsUpdateOne {
	ruo.mutation.ResetOwner()
	ruo.mutation.SetOwner(i)
	return ruo
}

// AddOwner adds i to the "owner" field.
func (ruo *RemindsUpdateOne) AddOwner(i int64) *RemindsUpdateOne {
	ruo.mutation.AddOwner(i)
	return ruo
}

// SetPeriod sets the "period" field.
func (ruo *RemindsUpdateOne) SetPeriod(s string) *RemindsUpdateOne {
	ruo.mutation.SetPeriod(s)
	return ruo
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (ruo *RemindsUpdateOne) SetNillablePeriod(s *string) *RemindsUpdateOne {
	if s != nil {
		ruo.SetPeriod(*s)
	}
	return ruo
}

// ClearPeriod clears the value of the "period" field.
func (ruo *RemindsUpdateOne) ClearPeriod() *RemindsUpdateOne {
	ruo.mutation.ClearPeriod()
	return ruo
}

// SetContent sets the "content" field.
func (ruo *RemindsUpdateOne) SetContent(s string) *RemindsUpdateOne {
	ruo.mutation.SetContent(s)
	return ruo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ruo *RemindsUpdateOne) SetNillableContent(s *string) *RemindsUpdateOne {
	if s != nil {
		ruo.SetContent(*s)
	}
	return ruo
}

// ClearContent clears the value of the "content" field.
func (ruo *RemindsUpdateOne) ClearContent() *RemindsUpdateOne {
	ruo.mutation.ClearContent()
	return ruo
}

// SetName sets the "name" field.
func (ruo *RemindsUpdateOne) SetName(s string) *RemindsUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// Mutation returns the RemindsMutation object of the builder.
func (ruo *RemindsUpdateOne) Mutation() *RemindsMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RemindsUpdate builder.
func (ruo *RemindsUpdateOne) Where(ps ...predicate.Reminds) *RemindsUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RemindsUpdateOne) Select(field string, fields ...string) *RemindsUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reminds entity.
func (ruo *RemindsUpdateOne) Save(ctx context.Context) (*Reminds, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RemindsUpdateOne) SaveX(ctx context.Context) *Reminds {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RemindsUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RemindsUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RemindsUpdateOne) sqlSave(ctx context.Context) (_node *Reminds, err error) {
	_spec := sqlgraph.NewUpdateSpec(reminds.Table, reminds.Columns, sqlgraph.NewFieldSpec(reminds.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reminds.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reminds.FieldID)
		for _, f := range fields {
			if !reminds.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reminds.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.ChatID(); ok {
		_spec.SetField(reminds.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedChatID(); ok {
		_spec.AddField(reminds.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Owner(); ok {
		_spec.SetField(reminds.FieldOwner, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedOwner(); ok {
		_spec.AddField(reminds.FieldOwner, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Period(); ok {
		_spec.SetField(reminds.FieldPeriod, field.TypeString, value)
	}
	if ruo.mutation.PeriodCleared() {
		_spec.ClearField(reminds.FieldPeriod, field.TypeString)
	}
	if value, ok := ruo.mutation.Content(); ok {
		_spec.SetField(reminds.FieldContent, field.TypeString, value)
	}
	if ruo.mutation.ContentCleared() {
		_spec.ClearField(reminds.FieldContent, field.TypeString)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(reminds.FieldName, field.TypeString, value)
	}
	_node = &Reminds{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reminds.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
