// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lemonnekogh/reminderbot/ent/reminds"
)

// Reminds is the model entity for the Reminds schema.
type Reminds struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner int64 `json:"owner,omitempty"`
	// Period holds the value of the "period" field.
	Period string `json:"period,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Name holds the value of the "name" field.
	Name         string `json:"name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reminds) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reminds.FieldChatID, reminds.FieldOwner:
			values[i] = new(sql.NullInt64)
		case reminds.FieldPeriod, reminds.FieldContent, reminds.FieldName:
			values[i] = new(sql.NullString)
		case reminds.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reminds fields.
func (r *Reminds) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reminds.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case reminds.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				r.ChatID = value.Int64
			}
		case reminds.FieldOwner:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				r.Owner = value.Int64
			}
		case reminds.FieldPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				r.Period = value.String
			}
		case reminds.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				r.Content = value.String
			}
		case reminds.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reminds.
// This includes values selected through modifiers, order, etc.
func (r *Reminds) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Reminds.
// Note that you need to call Reminds.Unwrap() before calling this method if this Reminds
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reminds) Update() *RemindsUpdateOne {
	return NewRemindsClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Reminds entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reminds) Unwrap() *Reminds {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reminds is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reminds) String() string {
	var builder strings.Builder
	builder.WriteString("Reminds(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", r.ChatID))
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(fmt.Sprintf("%v", r.Owner))
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(r.Period)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(r.Content)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteByte(')')
	return builder.String()
}

// RemindsSlice is a parsable slice of Reminds.
type RemindsSlice []*Reminds
