// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lemonnekogh/reminderbot/ent/operations"
)

// Operations is the model entity for the Operations schema.
type Operations struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed bool `json:"completed,omitempty"`
	// Success holds the value of the "success" field.
	Success bool `json:"success,omitempty"`
	// Operator holds the value of the "operator" field.
	Operator int64 `json:"operator,omitempty"`
	// MessageID holds the value of the "message_id" field.
	MessageID int `json:"message_id,omitempty"`
	// RemindID holds the value of the "remind_id" field.
	RemindID     uuid.UUID `json:"remind_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operations) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operations.FieldCompleted, operations.FieldSuccess:
			values[i] = new(sql.NullBool)
		case operations.FieldType, operations.FieldOperator, operations.FieldMessageID:
			values[i] = new(sql.NullInt64)
		case operations.FieldID, operations.FieldRemindID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operations fields.
func (o *Operations) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operations.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case operations.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				o.Type = int(value.Int64)
			}
		case operations.FieldCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				o.Completed = value.Bool
			}
		case operations.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				o.Success = value.Bool
			}
		case operations.FieldOperator:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				o.Operator = value.Int64
			}
		case operations.FieldMessageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				o.MessageID = int(value.Int64)
			}
		case operations.FieldRemindID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field remind_id", values[i])
			} else if value != nil {
				o.RemindID = *value
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Operations.
// This includes values selected through modifiers, order, etc.
func (o *Operations) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Operations.
// Note that you need to call Operations.Unwrap() before calling this method if this Operations
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operations) Update() *OperationsUpdateOne {
	return NewOperationsClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Operations entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Operations) Unwrap() *Operations {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operations is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operations) String() string {
	var builder strings.Builder
	builder.WriteString("Operations(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", o.Type))
	builder.WriteString(", ")
	builder.WriteString("completed=")
	builder.WriteString(fmt.Sprintf("%v", o.Completed))
	builder.WriteString(", ")
	builder.WriteString("success=")
	builder.WriteString(fmt.Sprintf("%v", o.Success))
	builder.WriteString(", ")
	builder.WriteString("operator=")
	builder.WriteString(fmt.Sprintf("%v", o.Operator))
	builder.WriteString(", ")
	builder.WriteString("message_id=")
	builder.WriteString(fmt.Sprintf("%v", o.MessageID))
	builder.WriteString(", ")
	builder.WriteString("remind_id=")
	builder.WriteString(fmt.Sprintf("%v", o.RemindID))
	builder.WriteByte(')')
	return builder.String()
}

// OperationsSlice is a parsable slice of Operations.
type OperationsSlice []*Operations
