// Code generated by ent, DO NOT EDIT.

package reminds

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lemonnekogh/reminderbot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Reminds {
	return predicate.Reminds(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Reminds {
	return predicate.Reminds(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Reminds {
	return predicate.Reminds(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Reminds {
	return predicate.Reminds(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Reminds {
	return predicate.Reminds(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Reminds {
	return predicate.Reminds(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Reminds {
	return predicate.Reminds(sql.FieldLTE(FieldID, id))
}

// ChatID applies equality check predicate on the "chat_id" field. It's identical to ChatIDEQ.
func ChatID(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldChatID, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldOwner, v))
}

// Period applies equality check predicate on the "period" field. It's identical to PeriodEQ.
func Period(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldPeriod, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldContent, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldName, v))
}

// ChatIDEQ applies the EQ predicate on the "chat_id" field.
func ChatIDEQ(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldChatID, v))
}

// ChatIDNEQ applies the NEQ predicate on the "chat_id" field.
func ChatIDNEQ(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldNEQ(FieldChatID, v))
}

// ChatIDIn applies the In predicate on the "chat_id" field.
func ChatIDIn(vs ...int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldIn(FieldChatID, vs...))
}

// ChatIDNotIn applies the NotIn predicate on the "chat_id" field.
func ChatIDNotIn(vs ...int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldNotIn(FieldChatID, vs...))
}

// ChatIDGT applies the GT predicate on the "chat_id" field.
func ChatIDGT(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldGT(FieldChatID, v))
}

// ChatIDGTE applies the GTE predicate on the "chat_id" field.
func ChatIDGTE(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldGTE(FieldChatID, v))
}

// ChatIDLT applies the LT predicate on the "chat_id" field.
func ChatIDLT(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldLT(FieldChatID, v))
}

// ChatIDLTE applies the LTE predicate on the "chat_id" field.
func ChatIDLTE(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldLTE(FieldChatID, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v int64) predicate.Reminds {
	return predicate.Reminds(sql.FieldLTE(FieldOwner, v))
}

// PeriodEQ applies the EQ predicate on the "period" field.
func PeriodEQ(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldPeriod, v))
}

// PeriodNEQ applies the NEQ predicate on the "period" field.
func PeriodNEQ(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldNEQ(FieldPeriod, v))
}

// PeriodIn applies the In predicate on the "period" field.
func PeriodIn(vs ...string) predicate.Reminds {
	return predicate.Reminds(sql.FieldIn(FieldPeriod, vs...))
}

// PeriodNotIn applies the NotIn predicate on the "period" field.
func PeriodNotIn(vs ...string) predicate.Reminds {
	return predicate.Reminds(sql.FieldNotIn(FieldPeriod, vs...))
}

// PeriodGT applies the GT predicate on the "period" field.
func PeriodGT(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldGT(FieldPeriod, v))
}

// PeriodGTE applies the GTE predicate on the "period" field.
func PeriodGTE(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldGTE(FieldPeriod, v))
}

// PeriodLT applies the LT predicate on the "period" field.
func PeriodLT(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldLT(FieldPeriod, v))
}

// PeriodLTE applies the LTE predicate on the "period" field.
func PeriodLTE(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldLTE(FieldPeriod, v))
}

// PeriodContains applies the Contains predicate on the "period" field.
func PeriodContains(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldContains(FieldPeriod, v))
}

// PeriodHasPrefix applies the HasPrefix predicate on the "period" field.
func PeriodHasPrefix(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldHasPrefix(FieldPeriod, v))
}

// PeriodHasSuffix applies the HasSuffix predicate on the "period" field.
func PeriodHasSuffix(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldHasSuffix(FieldPeriod, v))
}

// PeriodIsNil applies the IsNil predicate on the "period" field.
func PeriodIsNil() predicate.Reminds {
	return predicate.Reminds(sql.FieldIsNull(FieldPeriod))
}

// PeriodNotNil applies the NotNil predicate on the "period" field.
func PeriodNotNil() predicate.Reminds {
	return predicate.Reminds(sql.FieldNotNull(FieldPeriod))
}

// PeriodEqualFold applies the EqualFold predicate on the "period" field.
func PeriodEqualFold(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldEqualFold(FieldPeriod, v))
}

// PeriodContainsFold applies the ContainsFold predicate on the "period" field.
func PeriodContainsFold(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldContainsFold(FieldPeriod, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Reminds {
	return predicate.Reminds(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Reminds {
	return predicate.Reminds(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.Reminds {
	return predicate.Reminds(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.Reminds {
	return predicate.Reminds(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldContainsFold(FieldContent, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Reminds {
	return predicate.Reminds(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Reminds {
	return predicate.Reminds(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Reminds {
	return predicate.Reminds(sql.FieldContainsFold(FieldName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reminds) predicate.Reminds {
	return predicate.Reminds(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reminds) predicate.Reminds {
	return predicate.Reminds(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reminds) predicate.Reminds {
	return predicate.Reminds(func(s *sql.Selector) {
		p(s.Not())
	})
}
